async function fetchSettings() {
    response = await chrome.runtime.sendMessage({type: 'Settings', page: 'marks'});
    console.log(response);
}

fetchSettings();

//wrap the series calculation function so that we can get the data
const _calcfunc = $.fn.reportCardBoxplotCalculateAllSeriesData

var options = {
    calculateAverage: true,
    horizontalGraphs: true,
    displayBoxPlotSummary: true //Depends on horizontalGraphs being true
}

/**
 * @typedef IReportCardSeriesData
 * @property {number[][]} allGraphData
 * @property {[]} allOutliers
 * @property {{info: null, uid: null, value: number}[][]} input
 */

$.fn.reportCardBoxplotCalculateAllSeriesData = function () {
    /**
     * @type {IReportCardSeriesData}
     */
    const result = _calcfunc.apply(this, arguments)
    //OPTION: Calculate average
    if(options.calculateAverage) {
        const averageScores = []
        for(let i = 0; i<=4; i++) {//for each of 5 figure summary
            let totalScores = 0
            result.allGraphData.forEach((assessment) => { //for each assessment
                totalScores += assessment[i]
            })
            averageScores.push(totalScores / result.allGraphData.length)
        }
        result.allGraphData.push(averageScores) //push it into the result
    }
    handleResultsData(result)
    return result
}

//wrap the render as well to re-render the text on re render
const _renderfunc = $.fn.reportCardBoxplotRender

$.fn.reportCardBoxplotRender = function () {
    renderResultsData()
    //OPTION: Horizontal graphs
    if(options.horizontalGraphs) {
        //5 Figure summary depends on this option
        arguments[0].orientation = 'horizontal'
    }

    if(options.calculateAverage) {
        //OPTION: Calculate average
        arguments[0].allAssessments.push('Average') //Push a new assessment named Average
        arguments[0].additionalSeries[0].data.push(
            arguments[0].additionalSeries[0].data.reduce((partialSum, a) => partialSum + a, 0) / arguments[0].additionalSeries[0].data.filter(i => !!i).length
        )
    
        const additionalSeries = arguments[0].additionalSeries[0]
    
        //wrap the tooltip render function
        const _pointFormatter = arguments[0].additionalSeries[0].tooltip.pointFormatter
        arguments[0].additionalSeries[0].tooltip.pointFormatter = function() {
            if(this.x === additionalSeries.data.length - 1) { //if this.x(index) is the last one
                return  '<div style="width:200px!important;overflow:auto;white-space:normal !important;">' +
                `<div class="grade"><span>${additionalSeries.data[additionalSeries.data.length - 1].toFixed(2)}%</span></div>` +
                '<b>This is the average mark of all of your completed assessments generated by Schoolbox+</b>. The box plot takes the average of each 5 figure summaries.' +
                '</div>';
            } else {
                return _pointFormatter.apply(this, arguments)
            }
        }
    }


    return _renderfunc.apply(this, arguments)
}

//Click the "Apply filters" button to trigger reload
document.querySelector('#submit_button').click()

function wait(time) {
    return new Promise((res, _) => {setTimeout(() => {res()}, time)})
}

let assessmentData = []

//Handle the results and render them
async function handleResultsData({ allGraphData }) {
    assessmentData = allGraphData
}

async function renderResultsData() {
    //OPTION: Display 5 figure summary
    if(options.displayBoxPlotSummary) {
    const foo = ['min', 'Q1', 'Q2', 'Q3', 'max']
    await wait(10)


        /**
         * @type {Element}
         */
        const elm = document.querySelector('g.highcharts-axis-labels.highcharts-xaxis-labels')
        assessmentData.forEach((assessment, assessmentIndex) => {
            
            assessment.forEach((number, numberIndex) => {
                //creating the spacing element(inside the loop because apparently you need a new instance or smth)
                const spacingElm = document.createElement('tspan')
                spacingElm.setAttribute('dy', '14')
                spacingElm.setAttribute('x', elm.children[assessmentIndex].getAttribute('x'))
                spacingElm.setAttribute('style', 'transform-origin: 0px 0px; white-space: inherit;')
                spacingElm.innerText = 'â€‹'
                //creating the text element
                const textElm = document.createTextNode(`|${Math.round(number)}`)
                //insent the element
                elm.children[assessmentIndex].appendChild(spacingElm)
                elm.children[assessmentIndex].appendChild(textElm)
            })
    
            console.log(`Assessment ${assessmentIndex}: ${assessment.map((number, numberIndex) => {
                return `${foo[numberIndex]}: ${Math.round(number)}`
            }).join('|')}`)
        })
    }
}